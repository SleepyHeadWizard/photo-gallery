
import { Component, Input, OnInit, OnDestroy } from '@angular/core'; 
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IonicModule, ModalController, ActionSheetController, AlertController, LoadingController, Platform } from '@ionic/angular'; 
import { UserPhoto, PhotoService } from '../../services/photo.service';
import { AiService } from '../../services/ai.service';
import { TextToSpeech, TTSOptions } from '@capacitor-community/text-to-speech';

@Component({
  selector: 'app-image-detail-modal',
  templateUrl: './image-detail-modal.component.html',
  styleUrls: ['./image-detail-modal.component.scss'],
  standalone: true,
  imports: [IonicModule, CommonModule, FormsModule] 
})

export class ImageDetailModalComponent implements OnInit, OnDestroy {

  @Input() selectedPhoto!: UserPhoto; 
  generatedDescription: string | null = null; 
  isNarrating = false; 
  isSpeaking = false; 

  
  private webUtterance: SpeechSynthesisUtterance | null = null;

  constructor(
    private modalCtrl: ModalController,
    private photoService: PhotoService, 
    private aiService: AiService,       
    private actionSheetCtrl: ActionSheetController,
    private alertCtrl: AlertController,
    private loadingCtrl: LoadingController, 
    private platform: Platform 
  ) {}

  ngOnInit() {
    
  }

 
  ngOnDestroy() {
    this.stopSpeaking();
  }


  closeModal() {
    this.stopSpeaking();
    this.modalCtrl.dismiss(null, 'cancel');
  }


  async deletePhoto() {
    
    await this.stopSpeaking();

    const actionSheet = await this.actionSheetCtrl.create({
      header: 'Delete Photo',
      subHeader: 'Are you sure you want to delete this photo?',
      buttons: [
        {
          text: 'Delete',
          role: 'destructive',
          handler: async () => {
            try {
              await this.photoService.deletePicture(this.selectedPhoto);
              this.modalCtrl.dismiss(this.selectedPhoto, 'delete');
            } catch (error) {
               console.error('Error deleting photo from modal:', error);
               const alert = await this.alertCtrl.create({
                   header: 'Deletion Failed',
                   message: 'Could not delete the photo. Please try again.',
                   buttons: ['OK']
               });
               await alert.present();
            }
          }
        },
        {
          text: 'Cancel',
          role: 'cancel',
        }
      ]
    });
    await actionSheet.present();
  }


  async handleNarrationClick() {
    if (this.isSpeaking) {
        
        await this.stopSpeaking();
    } else if (!this.isNarrating) {
        
        await this.playNarration();
    }
    
  }



  private async playNarration() {
    if (!this.selectedPhoto) {
        console.warn('Play narration called without selected photo.');
        return; 
    }

    this.isNarrating = true; 
    this.generatedDescription = null; 

    const loading = await this.loadingCtrl.create({
      message: 'Generating description...',
      spinner: 'crescent'
    });
    await loading.present();

    try {
      console.log('Requesting description for:', this.selectedPhoto.filepath);
      this.generatedDescription = await this.aiService.generatePhotoDescription(this.selectedPhoto);
      console.log("Description received:", this.generatedDescription);

      if (this.generatedDescription) {
       
        await this.speakText(this.generatedDescription);
      } else {
        
        throw new Error("No description was generated by the service.");
      }

    } catch (error: any) {
      console.error('Narration process failed:', error);
     
      const alert = await this.alertCtrl.create({
        header: 'Narration Error',
        message: error?.message || 'Could not generate description. Please check logs or try again.',
        buttons: ['OK']
      });
      await alert.present();
      
      this.isSpeaking = false;
    } finally {
      
      await loading.dismiss();
      this.isNarrating = false; 
    }
  }

  /**
   * Speaks the provided text using the appropriate platform's TTS engine.
   * Manages the `isSpeaking` state.
   * @param text The text to be spoken.
   */
  async speakText(text: string) {
    if (!text) {
        console.warn("SpeakText called with empty text.");
        return;
    }

  
    await this.stopSpeaking();
    this.isSpeaking = true; // Set speaking flag immediately

    if (this.platform.is('hybrid')) {
    
      console.log("Using Capacitor TTS Plugin");
      try {
        const options: TTSOptions = {
          text: text,
          lang: 'en-US',      // Target language
          rate: 1.0,          // Speed
          pitch: 1.0,         // Pitch
          volume: 1.0,        // Volume
          category: 'playback',// Audio category 
        };
        await TextToSpeech.speak(options);
        console.log("Capacitor TTS initiated.");

      } catch (ttsError: any) {
        console.error('Capacitor TextToSpeech error:', ttsError);
        
        this.isSpeaking = false;
        const alert = await this.alertCtrl.create({
          header: 'Speech Error',
          message: `Could not speak the description: ${ttsError?.message || 'Unknown native TTS error'}`,
          buttons: ['OK']
        });
        await alert.present();
      }

    } else {
      // --- Web Browser Logic ---
      console.log("Using Web Speech API");
      if ('speechSynthesis' in window) {
        this.webUtterance = new SpeechSynthesisUtterance(text);
        this.webUtterance.lang = 'en-US'; // Set language
        this.webUtterance.rate = 1.0;     // Set speed
        this.webUtterance.pitch = 1.0;    // Set pitch
        this.webUtterance.volume = 1.0;   // Set volume

        // Event handler when speech finishes successfully
        this.webUtterance.onend = () => {
          console.log("Web Speech API finished.");
          this.isSpeaking = false; 
          this.webUtterance = null;
        };

        // Event handler for errors during speech
        this.webUtterance.onerror = (event) => {
          console.error('Web Speech API error:', event.error);
          this.isSpeaking = false; 
          this.webUtterance = null;
          this.alertCtrl.create({
              header: 'Speech Error',
              message: `Could not speak the description: ${event.error}`,
              buttons: ['OK']
          }).then(alert => alert.present());
        };

       
        window.speechSynthesis.speak(this.webUtterance);

      } else {
        
        console.warn('Web Speech API (TTS) not supported in this browser.');
        this.isSpeaking = false; 
        const alert = await this.alertCtrl.create({
          header: 'TTS Not Supported',
          message: `Your browser does not support Text-to-Speech.\n\n"${text}"`,
        });
        await alert.present();
      }
    }
  }


  async stopSpeaking() {
      if (!this.isSpeaking) {
          
          return; 
      }
      console.log("Stopping TTS...");

      if (this.platform.is('hybrid')) {
          
          try {
              await TextToSpeech.stop();
              console.log("Capacitor TTS stopped via plugin.");
          } catch (stopError) {

              console.error("Error stopping Capacitor TTS:", stopError);
          }
      } else {
          
          if ('speechSynthesis' in window && window.speechSynthesis.speaking) {
              
              if (this.webUtterance) {
                this.webUtterance.onend = null;
                this.webUtterance.onerror = null;
                this.webUtterance = null;
              }
              window.speechSynthesis.cancel(); 
              console.log("Web Speech API cancelled.");
          }
      }
      
      this.isSpeaking = false;
  }

} 